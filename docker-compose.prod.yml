version: '3.8'

services:
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_DATABASE:-ecommerce}
      POSTGRES_USER: ${DB_USERNAME:-ecommerce_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-ecommerce_user} -d ${DB_DATABASE:-ecommerce}"]
      interval: 30s
      timeout: 10s
      retries: 3

  php:
    build:
      context: ./docker/php
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_DATABASE: ${DB_DATABASE:-ecommerce}
      DB_USERNAME: ${DB_USERNAME:-ecommerce_user}
      DB_PASSWORD: ${DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-3600}
      APP_ENV: ${APP_ENV:-production}
      APP_DEBUG: ${APP_DEBUG:-false}
    volumes:
      - ./backend:/var/www/html
      - uploads_data:/var/www/html/public/uploads
    depends_on:
      db:
        condition: service_healthy

  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "${PORT:-80}:80"
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./backend/public:/var/www/html/public
      - ./frontend/dist:/var/www/html/frontend
      - uploads_data:/var/www/html/public/uploads
    depends_on:
      - php
    environment:
      NGINX_HOST: ${RAILWAY_PUBLIC_DOMAIN:-localhost}
      NGINX_PORT: 80

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:8080}
      NODE_ENV: production
    volumes:
      - frontend_dist:/app/dist

volumes:
  postgres_data:
  uploads_data:
  frontend_dist: 